{"version":3,"sources":["constants.js","utils.js","components/Link.js","components/LinkList.js","components/CreateLink.js","components/Header.js","components/Login.js","components/Search.js","components/App.js","reportWebVitals.js","index.js"],"names":["AUTH_TOKEN","timeDifferenceForDate","date","current","previous","milliSecondsPerMinute","milliSecondsPerHour","milliSecondsPerDay","milliSecondsPerMonth","milliSecondsPerYear","elapsed","Math","round","timeDifference","Date","getTime","VOTE_MUTATION","gql","Link","props","authToken","localStorage","getItem","console","log","link","className","index","mutation","variables","linkId","id","update","store","vote","data","updateStoreAfterVote","voteMutation","onClick","description","url","votes","length","postedBy","name","createdAt","FEED_QUERY","NEW_LINKS_SUBSCRIPTION","NEW_VOTES_SUBSCRIPTION","LinkList","updateCacheAfterVote","createVote","readQuery","query","feed","links","find","writeQuery","loading","error","subscribeToMore","document","updateQuery","prev","subscriptionData","newLink","Object","assign","count","__typename","subscribeToNewLinks","subscribeToNewVotes","map","POST_MUTATION","CreateLink","useState","setDescription","setUrl","history","useHistory","value","onChange","e","target","type","placeholder","onCompleted","push","post","unshift","postMutation","Header","authtoken","to","removeItem","SIGNUP_MUTATION","LOGIN_MUTATION","Login","login","setLogin","email","setEmail","password","setPassword","setName","confirm","a","signup","token","saveUserData","setItem","FEED_SEARCH_QUERY","Search","setLinks","filter","setFilter","client","useApolloClient","search","result","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","createHttpLink","uri","wsLink","WebSocketLink","options","reconnect","connectionParams","authLink","setContext","_","headers","authorization","split","getMainDefinition","kind","operation","concat","ApolloClient","cache","InMemoryCache","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e3ff8965.chunk.js","sourcesContent":["export const AUTH_TOKEN = \"auth-token\"","function timeDifference(current, previous) {\n  const milliSecondsPerMinute = 60 * 1000;\n  const milliSecondsPerHour = milliSecondsPerMinute * 60;\n  const milliSecondsPerDay = milliSecondsPerHour * 24;\n  const milliSecondsPerMonth = milliSecondsPerDay * 30;\n  const milliSecondsPerYear = milliSecondsPerDay * 365;\n\n  const elapsed = current - previous;\n\n  if (elapsed < milliSecondsPerMinute / 3) {\n    return \"just now\";\n  }\n\n  if (elapsed < milliSecondsPerMinute) {\n    return \"less than 1 min ago\";\n  } else if (elapsed < milliSecondsPerHour) {\n    return Math.round(elapsed / milliSecondsPerMinute) + \" min ago\";\n  } else if (elapsed < milliSecondsPerDay) {\n    return Math.round(elapsed / milliSecondsPerHour) + \" h ago\";\n  } else if (elapsed < milliSecondsPerMonth) {\n    return Math.round(elapsed / milliSecondsPerDay) + \" days ago\";\n  } else if (elapsed < milliSecondsPerYear) {\n    return Math.round(elapsed / milliSecondsPerMonth) + \" mo ago\";\n  } else {\n    return Math.round(elapsed / milliSecondsPerYear) + \" years ago\";\n  }\n}\n\nexport function timeDifferenceForDate(date) {\n  const now = new Date().getTime();\n  const updated = new Date(date).getTime();\n  return timeDifference(now, updated);\n}\n","import { gql } from \"apollo-boost\";\nimport React from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport { AUTH_TOKEN } from \"../constants\";\nimport { timeDifferenceForDate } from \"../utils\";\n\nconst VOTE_MUTATION = gql`\n  mutation VoteMutation($linkId: ID!) {\n    vote(linkId: $linkId) {\n      id\n      link {\n        id\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n      user {\n        id\n      }\n    }\n  }\n`;\n\nconst Link = (props) => {\n  const authToken = localStorage.getItem(AUTH_TOKEN);\n  console.log(props.link)\n  return (\n    <div className=\"flex mt2 items-start\">\n      <div className=\"flex items-center\">\n        <span className=\"gray\">{props.index + 1}.</span>\n        {authToken && (\n          <Mutation\n            mutation={VOTE_MUTATION}\n            variables={{linkId:props.link.id}}\n            update={(store, { data: { vote } }) => {\n              props.updateStoreAfterVote(store, vote, props.link.id);\n            }}\n          >\n            {(voteMutation) => (\n              <div className=\"ml1 gray f11\" onClick={voteMutation}>\n                ▲\n              </div>\n            )}\n          </Mutation>\n        )}\n      </div>\n      <div className=\"ml1\">\n        <div>\n          {props.link.description} ({props.link.url})\n        </div>\n        <div className=\"f6 lh-copy gray\">\n          {props.link.votes.length} votes | by{\" \"}\n          {props.link.postedBy ? props.link.postedBy.name : \"Unknown\"}{\" \"}\n          {timeDifferenceForDate(props.link.createdAt)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Link;\n","import { gql } from \"apollo-boost\";\nimport React from \"react\";\nimport { Query } from \"react-apollo\";\nimport Link from \"./Link\";\n\nexport const FEED_QUERY = gql`\n  {\n    feed {\n      links {\n        id\n        url\n        description\n        createdAt\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst NEW_LINKS_SUBSCRIPTION = gql`\n  subscription {\n    newLink {\n      id\n      url\n      description\n      createdAt\n      postedBy {\n        id\n        name\n      }\n      votes {\n        id\n        user {\n          id\n        }\n      }\n    }\n  }\n`\nconst NEW_VOTES_SUBSCRIPTION = gql`\n  subscription {\n    newVote {\n      id\n      link {\n        id\n        url\n        description\n        createdAt\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n      user {\n        id\n      }\n    }\n  }\n`\n\n\nconst LinkList = (props) => {\n  const updateCacheAfterVote = (store, createVote, linkId) => {\n    const data = store.readQuery({ query: FEED_QUERY });\n    const votedLink = data.feed.links.find((link) => link.id === linkId);\n    votedLink.votes = createVote.link.votes;\n    store.writeQuery({ query: FEED_QUERY, data });\n  };\n\n  const subscribeToNewLinks = subscribeToMore => {\n        subscribeToMore({document: NEW_LINKS_SUBSCRIPTION,\n        updateQuery: (prev,{subscriptionData}) => {\n            if(!subscriptionData) return prev\n            const newLink = subscriptionData.data.newLink\n            const exists = prev.feed.links.find(({id}) => id === newLink.id)\n            if(exists) return prev\n\n            return Object.assign({},prev,{\n                feed:{\n                    links: [newLink,...prev.feed.links],\n                    count: prev.feed.links.length + 1,\n                    __typename: prev.feed.__typename\n                }\n            })\n        }\n        })\n    }\n\n    const subscribeToNewVotes = subscribeToMore => {\n        subscribeToMore({\n            document:NEW_VOTES_SUBSCRIPTION\n        })\n    }\n\n  return (\n    <Query query={FEED_QUERY}>\n      {({ loading, error, data,subscribeToMore }) => {\n        if (loading) return <div>Fetching</div>;\n        if (error) {\n          console.log(error);\n          return <div>Error</div>;\n        }\n        subscribeToNewLinks(subscribeToMore)\n        subscribeToNewVotes(subscribeToMore)\n        const linksToRender = data.feed.links;\n        return linksToRender.map((link, index) => (\n          <Link\n            key={link.id}\n            link={link}\n            index={index}\n            updateStoreAfterVote={updateCacheAfterVote}\n          />\n        ));\n      }}\n    </Query>\n  );\n};\n\nexport default LinkList;\n","import { gql } from \"apollo-boost\";\nimport React, { useState } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport { useHistory } from \"react-router\";\nimport {FEED_QUERY} from './LinkList'\n\nconst POST_MUTATION = gql`\n  mutation PostMutation($description: String!, $url: String!) {\n    post(description: $description, url: $url) {\n      id\n      url\n      description\n    }\n  }\n`;\nconst CreateLink = (props) => {\n  const [description, setDescription] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n\n  const history = useHistory();\n  return (\n    <div>\n      <div className=\"mb2\">\n        <input\n          className=\"mb2\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          type=\"text\"\n          placeholder=\"A description for the link\"\n        />\n        <input\n          className=\"mb2\"\n          value={url}\n          onChange={(e) => setUrl(e.target.value)}\n          type=\"text\"\n          placeholder=\"The URL for the link\"\n        />\n      </div>\n      <Mutation\n        mutation={POST_MUTATION}\n        variables={{ description, url }}\n        onCompleted={() => history.push(\"/\")}\n        update={(store, { data: { post } }) => {\n          const data = store.readQuery({query:FEED_QUERY})\n          data.feed.links.unshift(post)\n          store.writeQuery({\n            query: FEED_QUERY,\n            data\n          })\n        }}\n      >\n        {(postMutation) => <button onClick={postMutation}>Submit</button>}\n      </Mutation>\n    </div>\n  );\n};\n\nexport default CreateLink;\n","import React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { AUTH_TOKEN } from \"../constants\";\n\nconst Header = (props) => {\n  const authtoken = localStorage.getItem(AUTH_TOKEN);\n  const history = useHistory();\n  return (\n    <div className=\"flex pa1 justify-between nowrap orange\">\n      <div className=\"flex flex-fixed black\">\n        <div className=\"fw7 mr1\">Hacker News</div>\n        <Link to=\"/\" className=\"ml1 no-underline black\">\n          new\n        </Link>\n        <div className=\"ml1\">|</div>\n        <Link to=\"/search\" className=\"ml1 no-underline black\">\n          search\n        </Link>\n        {authtoken && (\n          <div className=\"flex\">\n            <div className=\"ml1\">|</div>\n            <Link to=\"/create\" className=\"ml1 no-underline black\">\n              submit\n            </Link>\n          </div>\n        )}\n        <div className=\"flex flex-fixed\">\n          {authtoken ? (\n            <div\n              onClick={() => {\n                localStorage.removeItem(AUTH_TOKEN);\n                history.push(\"/\");\n              }}\n              className=\"ml1 pointer black\"\n            ></div>\n          ) : (\n            <Link to=\"/login\" className=\"ml1 no-underline black\">\n              login\n            </Link>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import { gql } from \"apollo-boost\";\nimport React, { useState } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport { useHistory } from \"react-router\";\nimport { AUTH_TOKEN } from \"../constants\";\n\nconst SIGNUP_MUTATION = gql`\n  mutation SignupMutation($email: String!, $password: String!, $name: String!) {\n    signup(email: $email, password: $password, name: $name) {\n      token\n    }\n  }\n`;\nconst LOGIN_MUTATION = gql`\n  mutation LoginMutation($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n    }\n  }\n`;\n\nconst Login = (props) => {\n  const [login, setLogin] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const history = useHistory()\n\n  const confirm = async (data) => {\n    const { token } = login ? data.login : data.signup\n    saveUserData(token)\n    history.push('/')\n  };\n\n  const saveUserData = (token) => {\n    localStorage.setItem(AUTH_TOKEN, token);\n  };\n\n  return (\n    <div>\n      <h4 className=\"mv3\">{login ? \"Login\" : \"Sign Up\"}</h4>\n      <div className=\"flex flex-column\">\n        {!login && (\n          <input\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            type=\"text\"\n            placeholder=\"Your name\"\n          />\n        )}\n        <input\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          type=\"text\"\n          placeholder=\"Your email address\"\n        />\n        <input\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          type=\"password\"\n          placeholder=\"Choose a safe password\"\n        />\n      </div>\n      <div className=\"flex mt3\">\n        <Mutation\n          mutation={login ? LOGIN_MUTATION : SIGNUP_MUTATION}\n          variables={{ email, password, name }}\n          onCompleted={(data) => confirm(data)}\n        >\n          {(mutation) => (\n            <div className=\"pointer mr2 button\" onClick={mutation}>\n              {login ? \"login\" : \"create account\"}\n            </div>\n          )}\n        </Mutation>\n        <div className=\"pointer button\" onClick={() => setLogin(!login)}>\n          {login ? \"need to create an account?\" : \"already have an account?\"}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import { gql } from 'apollo-boost'\nimport React,{useState} from 'react'\nimport { useApolloClient } from 'react-apollo'\nimport Link from './Link'\n\nconst FEED_SEARCH_QUERY = gql`\n  query FeedSearchQuery($filter: String!) {\n    feed(filter: $filter) {\n      links {\n        id\n        url\n        description\n        createdAt\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n`\n\n\n\nconst Search = props => {\n\n    const [links, setLinks] = useState([])\n    const [filter, setFilter] = useState('')\n\n    const client = useApolloClient()\n\n    const search = async () => {\n        const result = await client.query({\n            query:FEED_SEARCH_QUERY,\n            variables:{filter}\n        })\n        const links = result.data.feed.links\n        setLinks(links)\n    }\n\n    return (\n        <div>\n            <div>\n                Search\n                <input\n                type='text'\n                onChange={ e => setFilter(e.target.value)}\n                />\n                <button onClick={search}>OK</button>\n            </div>\n            {links.map((link,index) => <Link key={link.id} link={link} index={index}/>)}\n        </div>\n    )\n}\n\nexport default Search;","import React from \"react\";\nimport \"../styles/App.css\";\nimport CreateLink from \"./CreateLink\";\nimport LinkList from \"./LinkList\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport Login from './Login'\nimport Search from \"./Search\";\n\nfunction App() {\n  return (\n      <div className=\"center w85\">\n        <Header />\n        <div className=\"ph3 pv1 background-gray\">\n          <Switch>\n            <Route exact path=\"/\" component={LinkList} />\n            <Route exact path=\"/create\" component={CreateLink} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/search\" component={Search} />\n          </Switch>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloClient } from \"apollo-client\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { setContext } from \"apollo-link-context\";\nimport { AUTH_TOKEN } from \"./constants\";\nimport {WebSocketLink} from 'apollo-link-ws'\nimport { split } from \"apollo-link\";\nimport { getMainDefinition } from \"apollo-utilities\";\n\nconst httpLink = createHttpLink({uri:\"/graphql\"});\n\nconst wsLink = new WebSocketLink({\n  uri:\"ws:///subscriptions\",\n  options:{\n    reconnect:true,\n    connectionParams:{\n      authToken: localStorage.getItem(AUTH_TOKEN)\n    }\n  }\n})\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(AUTH_TOKEN);\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst link = split(\n  ({query}) => {\n    const {kind, operation} = getMainDefinition(query)\n    return kind === 'OperationDefinition' &&  operation ==='subscription'\n  },\n  wsLink,\n  authLink.concat(httpLink)\n)\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}